big_five %>% filter(idade <= 80) %>% # tem idades erradas no banco
ggplot() +
geom_point(aes(x = gênero, y = idade), stat = "summary", fun = "mean")
# mesmo gráfico que o anterior, mas usando a função stat_summary
big_five %>% filter(idade <= 80) %>%
ggplot(aes(x = gênero, y = idade)) +
stat_summary(geom = "point", fun = "mean")
# usando a mediana no lugar da média.
big_five %>% filter(idade <= 80) %>%
ggplot(aes(x = gênero, y = idade)) +
stat_summary(geom = "point", fun = "median")
big_five %>% filter(idade <= 80) %>%
ggplot(aes(x = gênero, y = idade)) +
geom_point(stat = "summary", fun = "mean") +
geom_errorbar(stat = "summary", fun.data = "mean_se")
big_five %>% filter(idade <= 80) %>%
ggplot(aes(x = gênero, y = idade)) +
geom_point(stat = "summary", fun = "mean") +
geom_errorbar(stat = "summary", fun.data = "mean_se", width = 0.3)
big_five %>% filter(idade <= 80) %>%
ggplot(aes(x = gênero, y = idade)) +
geom_point(stat = "summary", fun = "mean") +
geom_errorbar(stat = "summary", fun.min = "min", fun.max = "max")
ls()
df
sample(df$escolaridade,1)
sample(df$escolaridade,2)
data.frame("Operadores lógicos" = c("NA","NaN","Inf","NULL","TRUE","FALSE"),
Significados = c("Not available - dado faltante/indiponível",
"Not a number - indefinições matemáticas como 0/0, log(-1)",
"Infinito - número muito grande, como 1/0 e 10^310",
"Representa ausência de objeto",
"Condição é verdadeira",
"Condição é falsa"))
knitr::kable(op_logicos, format = "markdown")
library(readxl)
library(tidyverse)
library(knitr)
library(expss)
data.frame("Operadores lógicos" = c("NA","NaN","Inf","NULL","TRUE","FALSE"),
Significados = c("Not available - dado faltante/indiponível",
"Not a number - indefinições matemáticas como 0/0, log(-1)",
"Infinito - número muito grande, como 1/0 e 10^310",
"Representa ausência de objeto",
"Condição é verdadeira",
"Condição é falsa"))
knitr::kable(op_logicos, format = "markdown")
df
paste("s",1:5,sep="")
paste("s",1:5,sep=)
paste("s",1:5,sep="_")
paste("s",1:5,sep="")
glimpse(df)
data.frame(sexo_cod,idade)
sexo <- factor(sexo, levels = c(1,2), labels = c("masculino", "feminino"))
sexo
sexo
df
df[,c(escolaridade,"all")]
df[,c(escolaridade,all())]
df[,c("escolaridade",all())]
df[,c("escolaridade","all")]
df[,c("escolaridade",all)]
ls()
library(readxl)
library(tidyverse)
library(knitr)
library(expss)
df[ ,c("escolaridade",everything())]
df1
df1 %>% select(5:9,1,3,2,4)
df1 %>% select(5:9,everything())
df %>% select(starts_with("x"))
df
df %>% select(starts_with("v"))
df %>% select(starts_with("v","sum","mean"))
df %>% select(starts_with(c("v","sum","mean")))
df %>% select(starts_with("v"))
df %>% select(ends_with("dade"))
df %>% select(ends_with("1:5"))
df %>% select(ends_with(1:5))
df
df[ ,c("sexo",all())]
df[ ,startsWith("es")]
df[ ,startsWith(es)]
startsWith(df,"es")
startsWith(df,es
)
?startsWith()
startsWith(df,"e")
startsWith(df$sexo,"m")
df %>% select(!ends_with("dade"))
df %>% select(where(is.factor))
df %>% select(where(is.numeric) & starts_with("renda"))
df %>% select(where(is.numeric) & starts_with("s"))
df %>% select(where(is.numeric) & starts_with("s","v"))
df %>% select(where(is.numeric) & starts_with(c("s","v")))
df %>% select(where(is.numeric) & starts_with(c("s")))
df %>% select(where(is.numeric) & starts_with(c("s","v")))
# install.packages("readr")
library(readr)
# Exportar arquivos
?write.csv
?write_csv()
## Usando o pacote utils
?read.csv()
### read.delim(df.csv, header = TRUE, sep = "\t", dec = ".")
read.delim2(df_teste.csv, header = TRUE, sep = "\t", dec = ",")
### read.delim(df.csv, header = TRUE, sep = "\t", dec = ".")
read.delim2(df.csv, header = TRUE, sep = "\t", dec = ",")
### read.delim(df.csv, header = TRUE, sep = "\t", dec = ".")
read.delim2("df.csv", header = TRUE, sep = "\t", dec = ",")
### read.csv(df.csv, header = TRUE, sep = ",", dec = ".")
read.csv2("df.csv", header = TRUE, sep = ";", dec = ",")       # geralmente usamos essa configuração
### read.csv(df.csv, header = TRUE, sep = ",", dec = ".")
read.csv2("df.csv", header = TRUE, sep = ";", dec = ",", encoding = "UTF-8")       # geralmente usamos essa configuração
?read_csv2
read_csv2("df.csv", col_names = TRUE, na = "NA",skip_empty_rows = TRUE)
## Usando o pacote readxl para importar arquivos em excel
library(readxl)
?read_excel()
read_excel("df.xlsx")
read_excel("df.xlsx", col_names = TRUE)
install.packages("haeven")
install.packages("haven")
library(haven)
read_sav("df.sav")
read_sav("df.sav")
```
# Funções estatísticas básicas
df1
df1 %>% rename(v1:v5 = var1:var5)
df1 %>% rename(v1 = item1,
v2 = item2,
v3 = item3,
v4 = item4,
v5 = item5)
library(tidyverse)
library(knitr)
library(expss)
df1 %>% rename(v1 = item1,
v2 = item2,
v3 = item3,
v4 = item4,
v5 = item5)
df1 %>% rename(v1 = item1,
v2 = item2,
v3 = item3,
v4 = item4,
v5 = item5)
df %>% rename(v1 = item1,
v2 = item2,
v3 = item3,
v4 = item4,
v5 = item5)
df
df %>% rename(v1 = item1,
v2 = item2,
v3 = item3,
v4 = item4,
v5 = item5)
df %>% rename(item1 = v1,
item2 = v2,
item3 = v3,
item4 = v4,
item5 = v5)
?rename_with()
as_tibble(iris)
iris <- as_tibble(iris) # so it prints a little nicer
rename(iris, petal_length = Petal.Length)
rename_with(iris, toupper)
rename_with(iris, toupper, starts_with("Petal"))
rename_with(iris, ~ tolower(gsub(".", "_", .x, fixed = TRUE)))
df
df(ncol())
ncol(df)
df %>% rename_all(v1:v18)
df %>% rename_all("v1":"v18")
df %>% rename_all(paste("v",1:18,sep="")
df %>% rename_all(paste("v",1:18,sep=""))
paste("v",1:18,sep="")
df %>% rename_all(paste("v",1:18,sep=""))
library(tidyverse)
library(knitr)
df1
df1 %>% select(contains("es"))
df1 %>% select(contains("v"))
df
df %>% select(contains("sum"))
df %>% select(1,2,4,5,9:13)
df %>% select(contains("sum"))
df %>% select(1, contains("sum"))
df %>% select(ends_with("dade"))
df %>% select(starts_with("v"))
# calcular as médias da variável escore, por sexo (grupo_by(sexo))
df %>% group_by(sexo) %>% count(escolaridade)
df %>% group_by(sexo) %>% summarise(mean(escore))
df %>% group_by(sexo) %>% summarise(mean(escore)) %>% kable()
df %>% group_by(sexo,escolaridade) %>% summarise(mean(escore))
write.csv(df1,               # dataframe a ser exportado
"df1.csv",         # nome a ser dado ao dataframe exportado
sep = ",",         # caractere que separa as colunas
na = "NA",         # como codificar dados faltantes
dec = ".",         # que caractere usar para separar casas decimais
col.names = TRUE)  # informar se Há (TRUE) ou não (FALSE) nome das colunas no dataframe
### OBS.: Essas funções acima podem ser resumidas para...
write.csv(df1, "df1.csv")
write.csv2(df1, "df1.csv")
library(readxl)
col.names = TRUE)  # informar se Há (TRUE) ou não (FALSE) nome das colunas no dataframe
library(tidyverse)
library(knitr)
library(expss)
# Chunk 1
knitr::opts_chunk$set(echo=TRUE, warning=FALSE, message=FALSE)
# Chunk 2
# Instalação dos pacotes
if(!require(readxl)) install.packages("readxl",repos = "http://cran.us.r-project.org")
if(!require(tidyverse)) install.packages("tidyverse",repos = "http://cran.us.r-project.org")
if(!require(knitr)) install.packages("knitr",repos = "http://cran.us.r-project.org")
if(!require(kableExtra)) install.packages("kableExtra", repos = "http://cran.us.r-project.org")
if(!require(expss)) install.packages("expss", repos = "http://cran.us.r-project.org")
if(!require(tibble)) install.packages("tibble")
# Ativacao dos pacotes ====
library(readxl)
library(tidyverse)
library(knitr)
library(expss)
# Chunk 4
soma <- 3 + 4
# Chunk 5
soma <- 3 + 4   # Esse comando calcula a soma de 3 + 4 e salva no objeto "soma"
# Chunk 6
atalhos <- data.frame(atalho  =c("CTRL + ENTER",
"CTRL + SHIFT + C",
"CTRL + 1",
"CTRL + 2",
"SETA PARA CIMA (no console)",
"CTRL + ALT + SETA PARA ESQUERDA OU DIREITA",
"CTRL + SHIFT + ENTER",
"CTRL + S",
"CTRL + L",
"ALT + SHIFT + K"),
"o que faz"=c("Executa a linha selecionada",
"Comenta e descomenta a linha",
"Passa o cursor para o script",
"Passa o cursor para o console",
"acessa o histórico de comandos anteriores",
"Navega entre as abas de script abertas",
"Executa o Script inteiro",
"Salva o Script",
"Limpa o console",
"Ver a lista de atalhos"
))
knitr::kable(atalhos, format = "markdown")
# Chunk 7
# para verificar o diretório atual, execute o comando:
getwd()
# OBS.: se for necessário, navegue até o local desejado utilizando a aba "files"
# defina sua pasta de trabalho utilizando a função:
setwd("C:/Users/jmhbu/OneDrive/Documentos/R/R_basico/Intro_R")
# Chunk 8
table_operadores <- data.frame(Operador = c("+","-","*","/",":","^","sqrt","==",
">","<","<=",">=","!","&","|"),
Descrição = c("Adição",
"Subtração",
"Multiplicação",
"Divisão",
"Sequência",
"Exponencial",
"Raiz",
"Igualdade",
"Maior que",
"Menor que",
"Menor ou igual",
"Maior ou igual",
"Não",
"E",
"Ou"))
knitr::kable(table_operadores, format = "markdown")
# Chunk 9
# operações matemáticas
3+4
5-2
4*2
9/3
sqrt(9)
2^3
1:10
10:1
#3 = 3
3 == 3
3 > 2
3 < 2
3 >= 2
3 >= 3
3 <= 2:5
3 + 4 >= 14/2
!3 == 5
1 < 2 & 2 < 3
1 == 2 | 2 > 3
# Chunk 10
op_logicos <- data.frame("Operadores lógicos" = c("NA","NaN","Inf","NULL","TRUE","FALSE"),
Significados = c("Not available - dado faltante/indiponível",
"Not a number - indefinições matemáticas como 0/0, log(-1)",
"Infinito - número muito grande, como 1/0 e 10^310",
"Representa ausência de objeto",
"Condição é verdadeira",
"Condição é falsa"))
knitr::kable(op_logicos, format = "markdown")
# Chunk 11
minha_lista <- list("s01","masculino",23,"ensino médio")
class(minha_lista)
# minha_lista é um objeto do tipo lista, que guarda informações de diferentes tipos: id, sexo, idade, escolaridade
# essas informações foram salvas num objeto do tipo lista, que pode ser visto no environment
# informações não-numéricas aparecem entre "aspas" para o R reconhecer cada elemento dentro do objeto
# as informações dessa lista poderiam ser de um sujeito num df, cada informação é de uma natureza
# o comando "c", significa "concatenar". É usado para inserir mais de uma informação.
# Chunk 12
meu_vetor <- c("masculino","feminino","feminino","masculino","feminino")
is.list(meu_vetor)
is.vector(meu_vetor)
is.data.frame(meu_vetor)
# meu_vetor é um objeto do tipo vetor porque contem informações da mesma natureza. Poderiam ser informações sobre o sexo dos sujeitos em um  banco de dados
vetor1 <- c(1, 5, 3, -10)
vetor2 <- c("a", "b", "c")
class(vetor1)
class(vetor2)
# Se tentarmos misturar duas classes, o R vai apresentar um comportamento conhecido como coerção. Ele vai impor uma das classes aos objetos. Por exemplo:
vetor <- c(1, 2, "a")
vetor
class(vetor)
# Chunk 13
# criar vetor sexo, em que 1 é masculino e 2 é feminino.
sexo <- c(1,2,1,1,2)
is.vector(sexo)
# pode-se criar um vetor semelhante, mas com letras
# quando uma informação textual for inserida num objeto, ela tem que ir entre aspas.
sexo_cod <- c("m","f","m","m","f") # vetor com informações sobre sexo
# uma alternativa a isso é transformar a variável sexo em uma variável fator
sexo <- factor(sexo, levels = c(1,2), labels = c("masculino", "feminino"))
idade <- c(25,32,78,12,NA) # vetor com informações de idade
# A partir dos dois vetores anteriores é possível criar um dataframe (conjunto de vetores)
df <- data.frame(sexo_cod,idade)
# acrescentando a variável escolaridade
escolaridade <- c("superior","medio","fundamental","fundamental","medio")
cbind(df,escolaridade) # cbind() é uma função da base que anexa colunas.
df <- cbind(df,escolaridade)
# acrescentando a variável id
id <- 1:5
df <- cbind(id,df)
# Se quiser inserir um "s" antes do número de cada sujeito, podemos usar a função paste(), que concatena duas partes da informação que constar em uma coluna. Essa função diz: concatene um s com valores de 1 a 5, separados por nada.
paste("s",1:5,sep="_")
id <- paste("s",1:5,sep="")
# uma forma de salvar os resultados em uma nova variável diretamente no banco de dados é usando a função $ (cifrão). Quando digitamos o $ em seguida ao nome do objeto (dataframe), o R abre, automaticamente, abre uma janela de opções com as variáveis que existem no dataframe. Ao selecionar "id", por exemplo, os novos dados serão salvos SOBRE os dados existentes. Caso se queira CRIAR uma nova variável, basta digitar o nome de uma variável inexistente no dataframe.
df$id <- paste("s",1:5,sep="")
# se quiser inserir um novo sujeito no dataframe
suj6 <- list(id="s6",sexo_cod="m",idade=34,escolaridade="superior")
suj6 <- list("s6","m",34,"superior")
rbind(df,suj6)
df <- rbind(df,suj6)
glimpse(df)
# inserir a variável renda
# seq(from,to,by,lenth)
df$renda <- seq(1000, by=500,length=6)
# ou
#renda <- seq(1000, by=500,length=6)
#df <- cbind(df,renda)
# inserir uma variável "bonus", referente a um abono de 500 reais a cada sujeito.
# usamos a função rep(), que é semelhante à variável seq(), sem o argumento "by", porque a informação é sempre a mesma
df$bonus <- rep(500,6)
# ou
#bonus <- rep(500,6)
#df <- cbind(df,bonus)
# calcular renda_total, que é a soma das variáveis renda e bonus
df$renda_total <- df$renda + df$bonus
# inserir a variável "Estado Civil"
df$"Estado Civil" <- c("casado/a","solteiro/a","viúvo/a","solteiro/a","casado/a","casado/a")
# Chunk 14
df
names(df)
str(df)
glimpse(df)
head(df)
ncol(df)
nrow(df)
view(df)
unique(df$"Estado Civil")
unique(df$idade)
df_copia <- df
df <- df_copia
# Chunk 15
# Alterar o nome da variável "sexo_cod"
df <- rename(df,sexo = sexo_cod)
# Alterar o nome da variável "Estado Civil"
df <- rename(df,estado_civil = "Estado Civil")
# Chunk 16
# Selecionar linhas e colunas: dataframe[linhas,colunas]
df[1:3, ] # seleção das três primeiras linhas
df[ ,1:3] # seleção das três primeiras colunas
df[1:3,1:3] # seleção das três primeiras linhas e das três primeiras colunas
# Se que quisermos selecionar as linhas 1, 3 e 6, como fazemos?
df[c(1,3,5), ]
# se quisermos selecionar as colunas id, idade e renda_total
df[ ,c(1,3,7)]
df[ ,c("id","idade","renda_total")]
df[ ,c("renda_total","idade","id")]
# Chunk 17
# Selecionar somente as linhas dos participantes do sexo masculino
df[df$sexo == "m",  ]
# Selecionar somente as linhas dos participantes do sexo masculino com renda_total maior ou igual a 2500 reais.
df[df$sexo == "m" & df$renda_total >= 2500, ]
# Chunk 18
# Alterar o conteúdo dentro de uma variável
df$sexo[df$sexo == "f"] <- 0
df$sexo[df$sexo == "m"] <- 1
# Chunk 19
# visualisar que a variável sexo está como character, mas também foi possível perceber que outras variáveis também não estão no formato ideal. Vamos acertar todas elas.
glimpse(df)
str(df)
# mudar variável sexo para factor (note que está como caractere)
df$sexo <- as.numeric(df$sexo)
df$sexo <- as.factor(df$sexo) # factor é uma variável nominal
# df$sexo <- c("m","f","m","m","f","m")
# df$idade <- as.numeric(df$idade)
df$escolaridade <- as.factor(df$escolaridade)
# Chunk 20
# atribuir levels aos valores 0 e 1 da variável sexo
levels(df$sexo) <- c("feminino","masculino")
levels(df$escolaridade) <- c("fundamental","médio","superior")
# Chunk 21
# Alterar a ordem das variáveis no banco de dados
df <- df[ ,c("id","sexo","idade","escolaridade","estado_civil",
"renda","bonus","renda_total")]
# Chunk 22
# importar planilha para o objetivo variables
variables <- read_xlsx("Variables.xlsx")
# Chunk 23
# Juntar a planilha importada no dataframe df
df <- cbind(df,variables)
# Chunk 24
# Atribuir labels às variáveis v1 a v5
# vamos supor que essa variávels correspondessem às seguintes perguntas:
# v1 = Você costuma se atrasar para as aulas?
# v2 = Quanto você confia na sua capacidade de aprender?
# v3 = Quão bem você se relaciona com outras pessoas na sua escola?
# v4 = Quanto você gosta de sua escola?
# v5 = Quanto você procrastina para estudar?
# para isso vamos usar a função apply_labels do pacote expss
df  <- apply_labels(df,
v1 = "Você costuma se atrasar para as aulas?",
v2 = "Quanto você confia na sua capacidade de aprender?",
v3 = 'Quão bem você se relaciona com outras pessoas na sua escola?',
v4 = 'Quanto você gosta de sua escola?',
v5 = 'Quanto você procrastina para estudar?')
str(df)
glimpse(df)
view(df)
df
na.omit(df)
na.exclude(df)
na.pass(df)
mean(df$idade)
# mean(df$idade)    # essa função acaba não rodando, porque entre os dados de idade existe um NA
mean(df$idade,na.rm = TRUE)
df %>% drop_na()
# informando que só desejo eliminar as observações que continerem NA nas variáveis v1 a v5
df %>% drop_na(v1:v5)
df %>% replace_na(list(idade = mean(idade, na.rm = TRUE)))
library(readxl)
library(tidyverse)
library(knitr)
library(expss)
df %>% replace_na(list(idade = mean(idade, na.rm = TRUE)))
# nesse caso
df %>% replace_na(idade = mean(idade, na.rm = TRUE))
# nesse caso
df %>% replace_na("idade" = mean(idade, na.rm = TRUE))
# nesse caso
df %>% replace_na("idade" = mean("idade", na.rm = TRUE))
## Separar uma coluna em duas
df
library(readxl)
library(tidyverse)
library(knitr)
library(expss)
df %>% replace_na(list(idade = mean(idade, na.rm = TRUE)))
df %>% replace_na(list(idade = 0))
df %>% replace_na(list(idade = "não informado"))
paste("s",01:05,sep="")
union(paste("s0",1:9,sep=""),paste("s",10:99,sep = ""))
df %>% mutate(cod = paste(id,c(2012,2011,2015,2011,2013,2014)))
df %>% mutate(cod = paste(id,c(2012,2011,2015,2011,2013,2014,sep = "")))
df %>% mutate(cod = paste(id,c(2012,2011,2015,2011,2013,2014),sep = ""))
df %>% mutate(cod = paste(id,c(2012,2011,2015,2011,2013,2014),sep = "/"))
# para separar o código do sujeito e o ano de entrada podemos usar a função separate
df4 %>% separate(cod, sep = "/", into = c("cod_suj","ano_de_entrada"))
# paste("s",1:5,sep="")
# seq(1000,by=500,length=6)
# Criando um banco com informações para serem separadas.
df4 <- df %>% mutate(cod = paste(id,c(2012,2011,2015,2011,2013,2014),sep = "/"))
# para separar o código do sujeito e o ano de entrada podemos usar a função separate
df4 %>% separate(cod, sep = "/", into = c("cod_suj","ano_de_entrada"))
df4 <- df %>% mutate(cod = paste(id,c(2012,2011,2015,2011,2013,2014),sep = ""))
df4
df4 <- df %>% mutate(cod = paste(id,c(2012,2011,2015,2011,2013,2014),c(3,1,5,2,6,4),sep = ""))
df4
df4
df %>% separate(cod, sep = c(2,6), into = c("cod_suj","ano_de_entrada","ordem_de_entrada"))
df4
df4 %>% separate(cod, sep = c(2,6), into = c("cod_suj","ano_de_entrada","ordem_de_entrada"))
save.image("~/R/R_basico/Intro_R/.RData")

nrow(big_five)
corr.test(big_five[1:30,59:63], method = "pearson")
matrix <- corr.test(big_five[1:30,59:63], method = "pearson")
matrix$r
matrix$
matrix$p
matrix$p
matrix$n
matrix$stars
matrix$stars %>% pander()
corr.test(big_five$extr,big_five$amab, method = "pearson")
corr.test(big_five[,59:63], big_five$idade, method = "pearson")
corr.test(big_five[,59:63], big_five$idade, method = "pearson") %>% pander()
matrix$stars %>% pander()
matrix$stars %>% knitr::kable()
matrix$stars %>% knitr::kable()
corr.test(Dataset$bdi_sum,Dataset$bai_sum, method = "pearson")
ggplot(Dataset, aes(x=bdi_sum,y=bai_sum)) +
geom_point()
ggplot(Dataset, aes(x=bdi_sum,y=bai_sum)) +
geom_jitter()
ggplot(Dataset, aes(x=bdi_sum,y=bai_sum)) +
geom_jitter() +
geom_smoth(method = "lm")
ggplot(Dataset, aes(x=bdi_sum,y=bai_sum)) +
geom_jitter() +
geom_smooth(method = "lm")
ggplot(Dataset, aes(x=bdi_sum,y=bai_sum)) +
geom_jitter() +
geom_smooth(method = "lm") +
labs(title = " Depressão x Ansiedade",
x = "Depressão",
y = "Ansiedade")
pairs.panels(big_five[ ,59:63], method = "pearson")
corrplot(matrix,
method = "shade",
type = "lower",
order = "hclust",
adCoef.col = TRUE)
corrplot::corrplot(matrix,
method = "shade",
type = "lower",
order = "hclust",
adCoef.col = TRUE)
corrplot::corrplot(matrix$r,
method = "shade",
type = "lower",
order = "hclust",
adCoef.col = TRUE)
corrplot::corrplot(matrix$r,
method = "shade",
type = "upper",
order = "hclust",
adCoef.col = TRUE)
corrplot::corrplot(matrix$r,
method = "shade",
type = "full",
order = "hclust",
adCoef.col = TRUE)
corrplot::corrplot(matrix$r,
method = "shade",
type = "lower",
order = "hclust",
adCoef.col = TRUE)
corrplot::corrplot(matrix$r,
method = "shade",
type = "lower",
order = "alphabet",
adCoef.col = TRUE)
corrplot::corrplot(matrix$r,
method = "shade",
type = "lower",
order = "hclust",
adCoef.col = TRUE)
library(tidyverse)
str(imdb)
names(imdb)
glimpse(imdb)
library(readxl)
library(tidyverse)
library(knitr)
library(expss)
soma <- 3 + 4
atalhos <- data.frame(atalho  =c("CTRL + ENTER",
"CTRL + SHIFT + C",
"CTRL + 1",
"CTRL + 2",
"SETA PARA CIMA (no console)",
"CTRL + ALT + SETA PARA ESQUERDA OU DIREITA",
"CTRL + SHIFT + ENTER",
"CTRL + S",
"CTRL + L",
"ALT + SHIFT + K"),
"o que faz"=c("Executa a linha selecionada",
"Comenta e descomenta a linha",
"Passa o cursor para o script",
"Passa o cursor para o console",
"acessa o histórico de comandos anteriores",
"Navega entre as abas de script abertas",
"Executa o Script inteiro",
"Salva o Script",
"Limpa o console",
"Ver a lista de atalhos"
))
knitr::kable(atalhos, format = "markdown")
# para verificar o diretório atual, execute o comando:
getwd()
# defina sua pasta de trabalho utilizando a função:
setwd("C:/Users/jmhbu/OneDrive/Documentos/R/R_basico/Intro_R")
# defina sua pasta de trabalho utilizando a função:
setwd("C:/Users/jmhbu/OneDrive/Documentos/R/R_basico/Intro_R")
table_operadores <- data.frame(Operador = c("+","-","*","/",":","^","sqrt","==",
">","<","<=",">=","!","&","|"),
Descrição = c("Adição",
"Subtração",
"Multiplicação",
"Divisão",
"Sequência",
"Exponencial",
"Raiz",
"Igualdade",
"Maior que",
"Menor que",
"Menor ou igual",
"Maior ou igual",
"Não",
"E",
"Ou"))
knitr::kable(table_operadores, format = "markdown")
3+4
5-2
4*2
9/3
sqrt(9)
2^3
1:10
10:1
#3 = 3
3 == 3
3 > 2
3 < 2
3 >= 2
3 >= 3
3 <= 2:5
3 + 4 >= 14/2
!3 == 5
1 < 2 & 2 < 3
1 == 2 | 2 > 3
op_logicos <- data.frame("Operadores lógicos" = c("NA","NaN","Inf","NULL","TRUE","FALSE"),
Significados = c("Not available - dado faltante/indiponível",
"Not a number - indefinições matemáticas como 0/0, log(-1)",
"Infinito - número muito grande, como 1/0 e 10^310",
"Representa ausência de objeto",
"Condição é verdadeira",
"Condição é falsa"))
knitr::kable(op_logicos, format = "markdown")
minha_lista <- list("s01","masculino",23,"ensino médio")
class(minha_lista)
meu_vetor <- c("masculino","feminino","feminino","masculino","feminino")
is.list(meu_vetor)
is.vector(meu_vetor)
is.data.frame(meu_vetor)
vetor1 <- c(1, 5, 3, -10)
vetor2 <- c("a", "b", "c")
class(vetor1)
class(vetor2)
vetor <- c(1, 2, "a")
vetor
class(vetor)
# criar vetor sexo, em que 1 é masculino e 2 é feminino.
sexo <- c(1,2,1,1,2)
is.vector(sexo)
# pode-se criar um vetor semelhante, mas com letras
# quando uma informação textual for inserida num objeto, ela tem que ir entre aspas.
sexo_cod <- c("m","f","m","m","f") # vetor com informações sobre sexo
idade <- c(25,32,78,12,NA) # vetor com informações de idade
# A partir dos dois vetores anteriores é possível criar um dataframe (conjunto de vetores)
df <- data.frame(sexo_cod,idade)
# acrescentando a variável escolaridade
escolaridade <- c("superior","medio","fundamental","fundamental","medio")
cbind(df,escolaridade) # cbind() é uma função da base que anexa colunas.
df <- cbind(df,escolaridade)
df
# acrescentando a variável id
id <- 1:5
df <- cbind(id,df)
df
paste("s",1:5,sep="")
id <- paste("s",1:5,sep="")
id
df$id <- paste("s",1:5,sep="")
suj6 <- list(id="s6",sexo_cod="m",idade=34,escolaridade="superior")
suj6 <- list("s6","m",34,"superior")
rbind(df,suj6)
df <- rbind(df,suj6)
glimpse(df)
df$renda <- seq(1000, by=500,length=6)
# inserir uma variável "bonus", referente a um abono de 500 reais a cada sujeito.
# usamos a função rep(), que é semelhante à variável seq(), sem o argumento "by", porque a informação é sempre a mesma
df$bonus <- rep(500,6)
df
# calcular renda_total, que é a soma das variáveis renda e bonus
df$renda_total <- df$renda + df$bonus
# inserir a variável "Estado Civil"
df$"Estado Civil" <- c("casado/a","solteiro/a","viúvo/a","solteiro/a","casado/a","casado/a")
df
names(df)
str(df)
glimpse(df)
head(df)
ncol(df)
nrow(df)
view(df)
unique(df$"Estado Civil")
unique(df$idade)
df_copia <- df
df <- df_copia
# Alterar o nome da variável "sexo_cod"
df <- rename(df,sexo = sexo_cod)
df[1:3, ] # seleção das três primeiras linhas
df[ ,1:3] # seleção das três primeiras colunas
df[1:3,1:3] # seleção das três primeiras linhas e das três primeiras colunas
# Se que quisermos selecionar as linhas 1, 3 e 6, como fazemos?
df[c(1,3,5), ]
# se quisermos selecionar as colunas id, idade e renda_total
df[ ,c(1,3,7)]
df[ ,c("id","idade","renda_total")]
df[ ,c("renda_total","idade","id")]
# Selecionar somente as linhas dos participantes do sexo masculino
df[df$sexo == "m",  ]
# Selecionar somente as linhas dos participantes do sexo masculino com renda_total maior ou igual a 2500 reais.
df[df$sexo == "m" & df$renda_total >= 2500, ]
df$sexo[df$sexo == "f"] <- 0
df$sexo[df$sexo == "m"] <- 1
# visualisar que a variável sexo está como character, mas também foi possível perceber que outras variáveis também não estão no formato ideal. Vamos acertar todas elas.
glimpse(df)
str(df)
# mudar variável sexo para factor (note que está como caractere)
df$sexo <- as.numeric(df$sexo)
df$sexo <- as.factor(df$sexo) # factor é uma variável nominal
# df$idade <- as.numeric(df$idade)
df$escolaridade <- as.factor(df$escolaridade)
# atribuir levels aos valores 0 e 1 da variável sexo
levels(df$sexo) <- c("feminino","masculino")
levels(df$escolaridade) <- c("fundamental","médio","superior")
# Alterar o nome da variável "Estado Civil"
df <- rename(df,estado_civil = "Estado Civil")
# Alterar a ordem das variáveis no banco de dados
df <- df[ ,c("id","sexo","idade","escolaridade","estado_civil",
"renda","bonus","renda_total")]
variables <- read_xlsx("Variables.xlsx")
df <- cbind(df,read_xlsx("variables.xlsx"))
view(df)
read_xlsx("Variables.xlsx")
df
df  <- apply_labels(df,
v1 = "Você costuma se atrasar para as aulas?",
v2 = "Quanto você confia na sua capacidade de aprender?",
v3 = 'Quão bem você se relaciona com outras pessoas na sua escola?',
v4 = 'Quanto você gosta de sua escola?',
v5 = 'Quanto você procrastina para estudar?')
str(df)
glimpse(df)
view(df)
ifelse(df$renda <= 2000,1,2)
# Se quisermos salvar esses dados como uma coluna do df...
df$renda_cod <- ifelse(df$renda <= 2000,1,2)
# se quisermos criar uma coluna atribuindo 1 para homens e 0 para os demais.
ifelse(df$sexo == "masculino",1,0)
# se quisermos identificar homens com escolaridade fundamental
ifelse(df$sexo == "masculino" & df$escolaridade == "fundamental",1,0)
# se quisermos identificar homens com escolaridade fundamental OU pessoa casadas.
ifelse(df$sexo == "masculino" & df$escolaridade == "fundamental" | df$estado_civil == "casado/a",1,0)
df$escola_cod <- ifelse(df$escolaridade == "fundamental",1,
ifelse(df$escolaridade == "médio",2,3))
df$v1 <- ifelse(df$v1 == 1,5,
ifelse(df$v1 == 2,4,
ifelse(df$v1 == 3,3,
ifelse(df$v1 == 4,2,1))))
recode(df[ ,c("v1","v2","v3","v4","v5")]) <- c(1~5,2~4,3~3,4~2,5~1)
recode(df[ ,c("v1","v5")]) <- c(1~5,2~4,3~3,4~2,5~1)
df %>% group_by(sexo) %>% summarise(média = mean(idade))
df %>% group_by(sexo) %>% summarise(média = mean(idade, na.rm = TRUE))
str(df)
tidyverse_table <- data.frame("Funções tidyverse(dplyer)"=c(
"select()",
"filter()",
"slice()",
"arrange()",
"mutate()",
"group_by()"),
"O que faz"=c("seleciona colunas do dataframe",
"filtra linhas por categoria de variável",
"filtra linhas inteiras do dataframe",
"reordena as linhas do dataframe",
"cria novas colunas no dataframe",
"realiza os comandos que vierem a seguir pelas variáveis selecionadas"))
library(knitr)
tidyverse_table %>% kable(format = "markdown")
names(df) # visualisar número das colunas
df %>% names() %>% as.data.frame()
df[ ,c("id","sexo","escolaridade","estado_civil","v1","v2","v3","v4","v5")]
df %>% select(1,2,4,5,9:13) # o comando pipe diz o que é pra fazer com o dataframe
df %>% select(id, sexo, v1,v2,v3,v4,v5)
df1 <- df %>% select(1,2,4,5,9:13)
df1 %>% select(-4) # deletar a coluna estado_civil
df1 %>% select(5:9,1,3,2,4)
names(df)     # ver o nome e o número das colunas, para identificar que as duas últimas                  colunas são a 14 e a 15.
df %>% select(-14,-15)
df %>% select(-c(14,15))
df %>% select(-c(renda_cod,escola_cod))
df <- df %>% select(-c(renda_cod,escola_cod))
df %>% select(sexo,everything())
df %>% filter(sexo == "masculino")
df %>% filter(sexo == "masculino",escolaridade == "fundamental")
## ou ainda participantes do sexo masculino, do esnisno fundamental e solteiro/a
df %>% filter(sexo == "masculino",escolaridade == "fundamental",estado_civil == "solteiro/a")
## se quisermos retirar do banco todos os participantes com ensino fundamental.
## observe que o ponto de exclamação no código é uma espécie de "tudo, menos..."
df %>% filter(!escolaridade == "fundamental")
df %>% filter(!escolaridade == "fundamental",renda>=3000)
## ou, se quiser selecionar participantes com renda_total superior ou igual a R$ 2000,00.
df %>% filter(renda_total >= 2000)
## OBS.: lembrando que se quisermos salvar a filtragem em um novo dataframe...
df_renda_maior2000 <- df %>% filter(renda_total >= 2000)
# selecionar linhas inteiras
df %>% slice(1:3)
df %>% slice(1,4,6)
# selecionar por exclusão
df %>% slice(-1)
df %>% slice(-c(1,6))
df %>% slice(-1,-6)
# sortear uma proporção do banco de dados
df %>% slice_sample(prop = .35)
df %>% slice_sample(n=3)
# Ordenar df por idade
df %>% arrange(idade)
# Ordenar df por ordem decrescente de renda_total
df %>% arrange(desc(renda_total))
# É possível inserir mais de uma variável, por exemplo, sexo e renda_total
df %>% arrange(sexo,desc(renda_total))
# calcular as pontuações das pessoas nos itens de v1 a v5.
df %>% mutate(escore = v1+v2+v3+v4+v5)
df %>% mutate(escore = (v1+v2+v3+v4+v5)/5)
# se quisermos salvar a nova variável, então o código seria...
df <- df %>% mutate(escore = v1+v2+v3+v4+v5)
# calcular as médias da variável escore, por sexo (grupo_by(sexo))
df %>% group_by(sexo) %>% count(escolaridade)
df %>% group_by(sexo) %>% summarise(mean(escore))
df %>% group_by(sexo,escolaridade) %>% summarise(mean(escore))
names(big_five)
df %>% pivot_longer()
rlang::last_error()
?pivot_longer()
df
df %>% pivot_longer(id)
df
dim(df) # ver número de linhas e colunas do dataframe df
str(imdb)
## se quisermos calcular a somatória das pontuações nesses dois fatores, podemos usar:
df %>% select(v1,v2,v5) %>% rowSums()
## para salvar esses resultados em uma nova coluna no dataframe df, basta usar df$nome
df$sum1 <- df %>% select(v1,v2,v5) %>% rowSums()
df$sum2 <- df %>% select(v3,v4) %>% rowSums()
## podemos calcular essas pontuações pela média nos itens ao invés da somatória
df$mean1 <- df %>% select(v1,v2,v5) %>% rowMeans() %>% round(digits = 1)
df$mean2 <- df %>% select(v3,v4) %>% rowMeans()
df
count(df) # se colocar apenas o nome do dataframe, retorna o número de casos total
count(df,sexo) # especificando uma varíável, retorna o núemro de casos dentro da variável
count(df,sexo,escolaridade) # comando igual a df %>% group_by(sexo) %>% count(escolaridade)
# para acrescentar uma coluna com as respectivas porcentagens
df %>% count(sexo) %>% mutate(porc = n/sum(n)*100)
df %>% count(sexo,escolaridade) %>% mutate(porc = n/sum(n)*100)
# média das pontuações as variáveis "idade", "renda_total", "escore".
mean(df$idade)
df$idade <- as.numeric(as.character(df$idade))
df$idade
# agora, rodar novamente a média
mean(df$idade, na.rm = TRUE) # na coluna idade, há um valor de idade não informado (NA)
# procedimento semelhante para o cálculo do desvio padrão.
sd(df$idade, na.rm = TRUE)
# mediana
median(df$idade,na.rm = TRUE)
# moda
count(df,escore)
O pacote ggplot2 é um dos que integram a família tidyverse.
Ele foi estruturado segundo a Gramática dos Gráficos, em que os comandos são dados por camadas.
As três principais camadas são **dados**, **estética** e **geom**.
Para realizar as próximas análises iremos utilizar o banco de dados `big_five.rds`, que terá que ser importado para o R.
Esse banco contém as respostas de 19.719 participantes que responderam a 50 itens relacionados aos cinco grandes fatores de personalidade (extroversão, neuroticismo, cosncienciosidade, amabilidade e abertura).
Se você tem um email institucional da UFPE, [clique aqui para baixar o arquivo](https://drive.google.com/file/d/1JEGTkN3T66ubSSVROPVuao9oF9XAzII3/view?usp=sharing).
**Salve-o na mesma pasta do R que estão os arquivos utilizados neste disciplina**.
Se não tem o email institucional, o arquvio está disponível em formato `.csv` [nesta página](https://openpsychometrics.org/_rawdata/).
## Preparação do banco de dados
Para importar o arquivo `big_five.rds` para dentro do R usamos a função `read_rds()` do pacote `readr`.
Para não ter que instalar e carregar esse pacote vamos chamar a função de dentro do pacote usando o script abaixo.
```{r}
big_five <- readr::read_rds("big_five.rds")
big_five20 <- big_five %>% slice(1:20)
ggplot(data = big_five20) +
geom_point(aes(x = extr, y = amab))
ggplot(data = big_five, aes(x = extr)) +
geom_histogram()
ggplot(data = big_five, aes(x = neur)) +
geom_histogram()
ggplot(data = big_five, aes(x = amab)) +
geom_histogram()
ggplot(data = big_five, aes(x = cons)) +
geom_histogram()
ggplot(data = big_five, aes(x = aber)) +
geom_histogram()
ggplot(data = big_five, aes(x = gênero, y = ..count..)) +
geom_bar()
ggplot(data = big_five, aes(x = raça, y = ..count..)) +
geom_bar()
ggplot(data = big_five, aes(x = gênero, y = extr)) +
geom_boxplot()
ggplot(data = big_five, aes(x = gênero, y = cons)) +
geom_boxplot()
ggplot(data = big_five, aes(x = gênero, y = neur)) +
geom_boxplot()
ggplot(data = big_five, aes(x = gênero, y = amab)) +
geom_boxplot()
ggplot(data = big_five, aes(x = gênero, y = aber)) +
geom_boxplot()
ggplot(data = big_five) +
geom_line(aes(x = gênero, group = 1), stat = "count")
ggplot(data = big_five20) +
geom_point(aes(x = extr, y = amab, color = gênero))
ggplot(data = big_five20) +
geom_point(aes(x = extr, y = amab, shape = gênero))
# retirando color de dentro de aes
ggplot(data = big_five20) +
geom_point(aes(x = extr, y = amab, shape = gênero),
color = "darkolivegreen")
ggplot(data = big_five20) +
geom_point(aes(x = extr, y = amab, shape = gênero),
color = "#3d5a80")
ggplot(data = big_five20) +
geom_point(aes(x = extr, y = amab),
color = "#61988E", shape = 18)
ggplot(data = big_five20) +
geom_point(aes(x = extr, y = amab),
color = "#61988E", shape = 18, size = 5)
# é possível ajustar a borda (color) e o preenchimento dos pontos (fill)
# nesse site, os shapes de 21 a 25 permitem ajuste de color e fill
ggplot(data = big_five20) +
geom_point(aes(x = extr, y = amab),
fill = "#61988E", color = "black", shape = 25, size = 8)
ggplot(data = big_five20, aes(x = extr, y = amab)) +
geom_point(color = "#61988E", shape = 16, size = 2) +
geom_line()
ggplot(data = big_five20, aes(x = extr, y = amab)) +
geom_point(color = "#61988E", shape = 16, size = 2) +
geom_line(stat = "smooth", method = "lm")
ggplot(data = big_five20, aes(x = extr, y = amab)) +
geom_point(color = "#61988E", shape = 16, size = 2) +
geom_smooth()
ggplot(data = big_five20, aes(x = extr, y = amab)) +
geom_point(color = "#61988E", shape = 16, size = 2) +
geom_smooth(method = "lm", se = FALSE, color = "black", size = 1)
# Mudando o tipo de linha
ggplot(data = big_five20, aes(x = extr, y = amab)) +
geom_point(color = "#61988E", shape = 16, size = 2) +
geom_smooth(method = "lm", se = F, color = "black", size = 0.7,
linetype = "dashed")
## Especificando aes específicas para um dos geoms
ggplot(data = big_five20, aes(x = extr, y = amab)) +
geom_point(color = "#61988E", shape = 16, size = 0.7) +
geom_smooth(method = "lm", se = F, color = "black", size = 0.5,
aes(linetype = gênero))
## Especificando aes específicas para um dos geoms
ggplot(data = big_five20, aes(x = extr, y = amab)) +
geom_point(color = "#61988E", shape = 16, size = 0.7) +
geom_smooth(method = "lm", se = F, size = 0.5,
aes(color = gênero))
# repetindo o último gráfico, mas combinando dplyr com ggplot
big_five %>% slice(1:20) %>%
ggplot(aes(x = extr, y = amab)) +
geom_point(color = "#61988E", shape = 16, size = 0.7) +
geom_smooth(method = "lm", se = F, size = 0.5,
aes(color = gênero))
# ou, se quisermos fazer o mesmo gráfico com 1% da amostra
big_five %>% slice_sample(prop = .01) %>%
ggplot(aes(x = extr, y = amab)) +
geom_point(color = "#61988E", shape = 16, size = 2) +
geom_smooth(method = "lm", se = F, size = 1,na.rm = TRUE,
aes(color = gênero))
big_five %>% filter(idade <= 80) %>% # tem idades erradas no banco
ggplot() +
geom_point(aes(x = gênero, y = idade), stat = "summary", fun = "mean")
# mesmo gráfico que o anterior, mas usando a função stat_summary
big_five %>% filter(idade <= 80) %>%
ggplot(aes(x = gênero, y = idade)) +
stat_summary(geom = "point", fun = "mean")
# usando a mediana no lugar da média.
big_five %>% filter(idade <= 80) %>%
ggplot(aes(x = gênero, y = idade)) +
stat_summary(geom = "point", fun = "median")
big_five %>% filter(idade <= 80) %>%
ggplot(aes(x = gênero, y = idade)) +
geom_point(stat = "summary", fun = "mean") +
geom_errorbar(stat = "summary", fun.data = "mean_se")
big_five %>% filter(idade <= 80) %>%
ggplot(aes(x = gênero, y = idade)) +
geom_point(stat = "summary", fun = "mean") +
geom_errorbar(stat = "summary", fun.data = "mean_se", width = 0.3)
big_five %>% filter(idade <= 80) %>%
ggplot(aes(x = gênero, y = idade)) +
geom_point(stat = "summary", fun = "mean") +
geom_errorbar(stat = "summary", fun.min = "min", fun.max = "max")
